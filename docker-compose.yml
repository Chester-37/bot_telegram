version: '3.8'

services:
  # PostgreSQL Database optimizado para Synology
  db:
    image: postgres:15-alpine  # Versi칩n alpine m치s ligera para Synology
    container_name: bot-telegram-postgres
    restart: unless-stopped  # Mejor opci칩n para Synology DSM
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      # IMPORTANTE: Cambiar estas rutas por las de tu Synology
      # Ejemplo: /volume1/docker/bot_telegram/postgres_data
      - /volume1/docker/bot_telegram/postgres_data:/var/lib/postgresql/data
      - /volume1/docker/bot_telegram/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"  # Puerto est치ndar PostgreSQL
    networks:
      - bot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Bot de Telegram
  telegram-bot:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: bot-telegram-app
    restart: unless-stopped
    environment:
      # Variables de entorno para PostgreSQL en Synology
      USE_SQLITE: "false"
      POSTGRES_HOST: "db"
      POSTGRES_PORT: "5432"
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BOT_TOKEN: ${BOT_TOKEN}
      TZ: "Europe/Madrid"  # Ajustar zona horaria
    volumes:
      # IMPORTANTE: Cambiar estas rutas por las de tu Synology
      # Ejemplo: /volume1/docker/bot_telegram/data
      - /volume1/docker/bot_telegram/data:/app/data
      - /volume1/docker/bot_telegram/logs:/app/logs
    working_dir: /app
    command: ["python", "main.py"]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - bot_network

networks:
  bot_network:
    driver: bridge